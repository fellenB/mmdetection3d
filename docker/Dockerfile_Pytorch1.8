ARG PYTORCH="1.8.0"
ARG CUDA="11.1"
ARG CUDNN="8"

FROM pytorch/pytorch:${PYTORCH}-cuda${CUDA}-cudnn${CUDNN}-devel

ENV TORCH_CUDA_ARCH_LIST="6.0 6.1 7.0 8.0 8.6+PTX"
ENV TORCH_NVCC_FLAGS="-Xfatbin -compress-all"
ENV CMAKE_PREFIX_PATH="$(dirname $(which conda))/../"

RUN apt-get update && apt-get install -y ffmpeg libsm6 libxext6 git ninja-build libglib2.0-0 libsm6 libxrender-dev libxext6 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install MMCV, MMDetection and MMSegmentation
RUN pip install mmcv-full==1.3.8 -f https://download.openmmlab.com/mmcv/dist/cu111/torch1.8.0/index.html
RUN pip install mmdet==2.14.0
RUN pip install mmsegmentation==0.14.1

# Install MMDetection3D
RUN conda clean --all
RUN git clone https://github.com/open-mmlab/mmdetection3d.git /mmdetection3d
WORKDIR /mmdetection3d
ENV FORCE_CUDA="1"
RUN pip install -r requirements/build.txt
RUN pip install --no-cache-dir -e .

# ADD copies the files from a source on the host into the containerâ€™s own filesystem at the set destination.
# CMD can be used for executing a specific command within the container.
# ENTRYPOINT sets a default application to be used every time a container is created with the image.
# ENV sets environment variables.
# EXPOSE associates a specific port to enable networking between the container and the outside world.
# FROM defines the base image used to start the build process.
# MAINTAINER defines a full name and email address of the image creator.
# RUN is the central executing directive for Dockerfiles.
# USER sets the UID (or username) which is to run the container.
# VOLUME is used to enable access from the container to a directory on the host machine.
# WORKDIR sets the path where the command, defined with CMD, is to be executed.
# LABEL allows you to add a label to your docker image.